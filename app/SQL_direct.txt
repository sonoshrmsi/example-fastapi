# DIRECT SQL COMMANDS


# @app.get("/posts")
# def get_post():
    # cursor.execute("""SELECT * FROM posts""")
    # posts = cursor.fetchall()
    # print(posts)
    # return {"data": posts}


# @app.post("/posts", status_code=status.HTTP_201_CREATED)
    # post_dict = post.dict()
    # post_dict['id'] = randrange(0,1000000)
    # my_posts.append(post_dict)
    # CREATE A POST
    # cursor.execute("""INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *""",
    #                 (post.title, post.content, post.published))
    # new_post = cursor.fetchone()
    # conn.commit() # in order to insert data make sure this command is here!
    # title: str, content: str --> pydantic

    # new_post = models.Post(title= post.title, content= post.content, published= post.published)
    # return {"data": new_post}
    # return {f"title: {new_post.title}, content: {new_post.content}, published: {new_post.published}"}

# @app.get("/posts/latest")
# def get_latest_post():
#     post = my_posts[len(my_posts)-1]
#     return {"detail": post}

# @app.get("/posts/{id}")
# def get_post(id: int):
    # print(find_post(int(id)))
    # cursor.execute("""SELECT * FROM posts WHERE id=%s""",(str(id),))
    # post = cursor.fetchone()
    # print(post)
    # return find_post(int(id))
    # post = find_post(id)
    # print(post)
    # if not post:
        # cleaner version of status not found
        # raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Post with id, {id}, was not found")
        # response.status_code = 404
        # response.status_code = status.HTTP_404_NOT_FOUND
        # return {"Message": f"Post with id, {id}, was not found"}
    
    # return {"post details": post}


# @app.delete("/posts/{id}", status_code=status.HTTP_204_NO_CONTENT)
# def delete_post(id: int):
    # index = find_index_post(id)
    # cursor.execute("""DELETE FROM posts WHERE id=%s RETURNING *""",(str(id),))
    # deleted_post = cursor.fetchone()
    # if deleted_post.first() == None:
        # raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail = f"Post with id, {id}, does not exist")
    # my_posts.pop(index)
    # return {"message": "post was successfully deleted"}
    # conn.commit()
    # return Response(status_code=status.HTTP_204_NO_CONTENT)

# @app.put("/posts/{id}")
# def update_post(id: int, post: Post):
    # cursor.execute("""UPDATE posts SET title = %s, content = %s, published=%s WHERE id = %s RETURNING *""",(post.title, post.content, post.published, str(id)))
    # updated_post =  cursor.fetchone()
    # index = find_index_post(id)
    # if post_ == None:
        # raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail = f"Post with id, {id}, does not exist")
    # post_dict = post.dict()
    # post_dict["id"] = id
    # my_posts[index] = post_dict
    # conn.commit()
    
    # return {"data": updated_post.first()}

